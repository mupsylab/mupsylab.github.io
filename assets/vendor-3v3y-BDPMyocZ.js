import{g as c,a as i,t as w}from"./vendor-8jHm-DXstvPfe.js";import{r as f}from"./vendor-eqDO-Ti6p_k8X.js";import{g as x}from"./vendor-RE7Z-DOm9JKld.js";function I(s){const p=x(),r=f(!1),n=f([]);return{updateExpandRows:()=>{const o=s.data.value||[],e=s.rowKey.value;if(r.value)n.value=o.slice();else if(e){const a=c(n.value,e);n.value=o.reduce((u,t)=>{const d=i(t,e);return a[d]&&u.push(t),u},[])}else n.value=[]},toggleRowExpansion:(o,e)=>{w(n.value,o,e)&&p.emit("expand-change",o,n.value.slice())},setExpandRowKeys:o=>{p.store.assertRowKey();const e=s.data.value||[],a=s.rowKey.value,u=c(e,a);n.value=o.reduce((t,d)=>{const l=u[d];return l&&t.push(l.row),t},[])},isRowExpanded:o=>{const e=s.rowKey.value;return e?!!c(n.value,e)[i(o,e)]:n.value.includes(o)},states:{expandRows:n,defaultExpandAll:r}}}export{I as u};
